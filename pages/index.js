import Head from 'next/head'
import { fetchReadinessData } from 'lib/oura'
import { hsv2rgb, rgb2css } from 'lib/color'
import ProgressBar from 'components/progress-bar'

export default function Home({
  totalScore,
  data,
  backgroundColor,
  barColor,
  updatedOn,
}) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <style jsx global>
        {`
          html,
          body,
          #__next {
            background-color: ${backgroundColor};
          }
        `}
      </style>
      <div className="container" style={{ backgroundColor: backgroundColor }}>
        <div className="main">
          <p>
            <span className="score">{totalScore}</span>
            <span> / 100</span>
          </p>
          {data.map(({ label, value }) => (
            <ProgressBar
              key={label}
              color={barColor}
              completed={value}
              labelComponent={<span>{label}</span>}
            />
          ))}
        </div>
        <div className="footer">
          <p>Updated on {updatedOn}</p>
        </div>
      </div>
    </>
  )
}

export async function getServerSideProps({ params, req }) {
  const rawData = await fetchReadinessData()

  return {
    props: {
      totalScore: rawData.score,
      updatedOn: rawData.summary_date,
      data: [
        { label: 'Activity Balance', value: rawData.score_activity_balance },
        { label: 'HRV Balance', value: rawData.score_hrv_balance },
        { label: 'Previous Day', value: rawData.score_previous_day },
        { label: 'Previous Night', value: rawData.score_recovery_index },
        { label: 'Recovery Index', value: rawData.score_recovery_index },
        { label: 'Resting HR', value: rawData.score_resting_hr },
        { label: 'Sleep Balance', value: rawData.score_sleep_balance },
        { label: 'Temperature', value: rawData.score_temperature },
      ],
      backgroundColor: rgb2css(hsv2rgb(210, 0.6, rawData.score / 100 - 0.3)),
      barColor: rgb2css(hsv2rgb(210, 0.6, rawData.score / 100)),
    },
  }
}
